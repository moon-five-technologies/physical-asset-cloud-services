# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.recorded_time_all_of import RecordedTimeAllOf
from openapi_server import util

from openapi_server.models.recorded_time_all_of import RecordedTimeAllOf  # noqa: E501

class RecordedTime(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recorded_time=None):  # noqa: E501
        """RecordedTime - a model defined in OpenAPI

        :param recorded_time: The recorded_time of this RecordedTime.  # noqa: E501
        :type recorded_time: datetime
        """
        self.openapi_types = {
            'recorded_time': datetime
        }

        self.attribute_map = {
            'recorded_time': 'recorded_time'
        }

        self._recorded_time = recorded_time

    @classmethod
    def from_dict(cls, dikt) -> 'RecordedTime':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RecordedTime of this RecordedTime.  # noqa: E501
        :rtype: RecordedTime
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recorded_time(self):
        """Gets the recorded_time of this RecordedTime.


        :return: The recorded_time of this RecordedTime.
        :rtype: datetime
        """
        return self._recorded_time

    @recorded_time.setter
    def recorded_time(self, recorded_time):
        """Sets the recorded_time of this RecordedTime.


        :param recorded_time: The recorded_time of this RecordedTime.
        :type recorded_time: datetime
        """
        if recorded_time is None:
            raise ValueError("Invalid value for `recorded_time`, must not be `None`")  # noqa: E501

        self._recorded_time = recorded_time
