# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.name import Name
from openapi_server.models.phone_number import PhoneNumber
from openapi_server.models.recorded_time import RecordedTime
from openapi_server.models.user_all_of import UserAllOf
from openapi_server import util

from openapi_server.models.name import Name  # noqa: E501
from openapi_server.models.phone_number import PhoneNumber  # noqa: E501
from openapi_server.models.recorded_time import RecordedTime  # noqa: E501
from openapi_server.models.user_all_of import UserAllOf  # noqa: E501

class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recorded_time=None, country_code=None, area_code=None, phone_number=None, first_name=None, last_name=None, email=None, firebase_uuid=None):  # noqa: E501
        """User - a model defined in OpenAPI

        :param recorded_time: The recorded_time of this User.  # noqa: E501
        :type recorded_time: datetime
        :param country_code: The country_code of this User.  # noqa: E501
        :type country_code: int
        :param area_code: The area_code of this User.  # noqa: E501
        :type area_code: int
        :param phone_number: The phone_number of this User.  # noqa: E501
        :type phone_number: int
        :param first_name: The first_name of this User.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this User.  # noqa: E501
        :type last_name: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param firebase_uuid: The firebase_uuid of this User.  # noqa: E501
        :type firebase_uuid: str
        """
        self.openapi_types = {
            'recorded_time': datetime,
            'country_code': int,
            'area_code': int,
            'phone_number': int,
            'first_name': str,
            'last_name': str,
            'email': str,
            'firebase_uuid': str
        }

        self.attribute_map = {
            'recorded_time': 'recorded_time',
            'country_code': 'country_code',
            'area_code': 'area_code',
            'phone_number': 'phone_number',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'email': 'email',
            'firebase_uuid': 'firebase_uuid'
        }

        self._recorded_time = recorded_time
        self._country_code = country_code
        self._area_code = area_code
        self._phone_number = phone_number
        self._first_name = first_name
        self._last_name = last_name
        self._email = email
        self._firebase_uuid = firebase_uuid

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recorded_time(self):
        """Gets the recorded_time of this User.


        :return: The recorded_time of this User.
        :rtype: datetime
        """
        return self._recorded_time

    @recorded_time.setter
    def recorded_time(self, recorded_time):
        """Sets the recorded_time of this User.


        :param recorded_time: The recorded_time of this User.
        :type recorded_time: datetime
        """
        if recorded_time is None:
            raise ValueError("Invalid value for `recorded_time`, must not be `None`")  # noqa: E501

        self._recorded_time = recorded_time

    @property
    def country_code(self):
        """Gets the country_code of this User.


        :return: The country_code of this User.
        :rtype: int
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this User.


        :param country_code: The country_code of this User.
        :type country_code: int
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")  # noqa: E501

        self._country_code = country_code

    @property
    def area_code(self):
        """Gets the area_code of this User.


        :return: The area_code of this User.
        :rtype: int
        """
        return self._area_code

    @area_code.setter
    def area_code(self, area_code):
        """Sets the area_code of this User.


        :param area_code: The area_code of this User.
        :type area_code: int
        """
        if area_code is None:
            raise ValueError("Invalid value for `area_code`, must not be `None`")  # noqa: E501

        self._area_code = area_code

    @property
    def phone_number(self):
        """Gets the phone_number of this User.


        :return: The phone_number of this User.
        :rtype: int
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this User.


        :param phone_number: The phone_number of this User.
        :type phone_number: int
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def first_name(self):
        """Gets the first_name of this User.


        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.


        :param first_name: The first_name of this User.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this User.


        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.


        :param last_name: The last_name of this User.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def firebase_uuid(self):
        """Gets the firebase_uuid of this User.


        :return: The firebase_uuid of this User.
        :rtype: str
        """
        return self._firebase_uuid

    @firebase_uuid.setter
    def firebase_uuid(self, firebase_uuid):
        """Sets the firebase_uuid of this User.


        :param firebase_uuid: The firebase_uuid of this User.
        :type firebase_uuid: str
        """
        if firebase_uuid is None:
            raise ValueError("Invalid value for `firebase_uuid`, must not be `None`")  # noqa: E501

        self._firebase_uuid = firebase_uuid
