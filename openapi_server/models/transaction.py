# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Transaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance=None, transaction_cost=None, transaction_location=None, name_of_transaction_location=None, is_refund=None):  # noqa: E501
        """Transaction - a model defined in OpenAPI

        :param balance: The balance of this Transaction.  # noqa: E501
        :type balance: float
        :param transaction_cost: The transaction_cost of this Transaction.  # noqa: E501
        :type transaction_cost: float
        :param transaction_location: The transaction_location of this Transaction.  # noqa: E501
        :type transaction_location: str
        :param name_of_transaction_location: The name_of_transaction_location of this Transaction.  # noqa: E501
        :type name_of_transaction_location: str
        :param is_refund: The is_refund of this Transaction.  # noqa: E501
        :type is_refund: bool
        """
        self.openapi_types = {
            'balance': float,
            'transaction_cost': float,
            'transaction_location': str,
            'name_of_transaction_location': str,
            'is_refund': bool
        }

        self.attribute_map = {
            'balance': 'balance',
            'transaction_cost': 'transaction_cost',
            'transaction_location': 'transaction_location',
            'name_of_transaction_location': 'name_of_transaction_location',
            'is_refund': 'is_refund'
        }

        self._balance = balance
        self._transaction_cost = transaction_cost
        self._transaction_location = transaction_location
        self._name_of_transaction_location = name_of_transaction_location
        self._is_refund = is_refund

    @classmethod
    def from_dict(cls, dikt) -> 'Transaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Transaction of this Transaction.  # noqa: E501
        :rtype: Transaction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance(self):
        """Gets the balance of this Transaction.


        :return: The balance of this Transaction.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Transaction.


        :param balance: The balance of this Transaction.
        :type balance: float
        """

        self._balance = balance

    @property
    def transaction_cost(self):
        """Gets the transaction_cost of this Transaction.


        :return: The transaction_cost of this Transaction.
        :rtype: float
        """
        return self._transaction_cost

    @transaction_cost.setter
    def transaction_cost(self, transaction_cost):
        """Sets the transaction_cost of this Transaction.


        :param transaction_cost: The transaction_cost of this Transaction.
        :type transaction_cost: float
        """

        self._transaction_cost = transaction_cost

    @property
    def transaction_location(self):
        """Gets the transaction_location of this Transaction.


        :return: The transaction_location of this Transaction.
        :rtype: str
        """
        return self._transaction_location

    @transaction_location.setter
    def transaction_location(self, transaction_location):
        """Sets the transaction_location of this Transaction.


        :param transaction_location: The transaction_location of this Transaction.
        :type transaction_location: str
        """

        self._transaction_location = transaction_location

    @property
    def name_of_transaction_location(self):
        """Gets the name_of_transaction_location of this Transaction.


        :return: The name_of_transaction_location of this Transaction.
        :rtype: str
        """
        return self._name_of_transaction_location

    @name_of_transaction_location.setter
    def name_of_transaction_location(self, name_of_transaction_location):
        """Sets the name_of_transaction_location of this Transaction.


        :param name_of_transaction_location: The name_of_transaction_location of this Transaction.
        :type name_of_transaction_location: str
        """

        self._name_of_transaction_location = name_of_transaction_location

    @property
    def is_refund(self):
        """Gets the is_refund of this Transaction.


        :return: The is_refund of this Transaction.
        :rtype: bool
        """
        return self._is_refund

    @is_refund.setter
    def is_refund(self, is_refund):
        """Sets the is_refund of this Transaction.


        :param is_refund: The is_refund of this Transaction.
        :type is_refund: bool
        """

        self._is_refund = is_refund
